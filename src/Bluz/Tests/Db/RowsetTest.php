<?php

namespace Bluz\Db;

use Bluz;
use Bluz\Db;
use Bluz\Tests\Db\Fixtures;

/**
 * Test class for Rowset.
 * Generated by PHPUnit on 2011-07-27 at 13:52:00.
 */
class RowsetTest extends Bluz\Tests\TestCase
{

    /**
     * @var Rowset
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new Bluz\Db\Rowset;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Rowset::rewind
     */
    public function testRewind()
    {
        $this->object->rewind();
        $this->assertEquals(0, $this->object->key());
    }

    /**
     * @covers Rowset::current
     */
    public function testCurrentOfEmptyRowset()
    {
        $currentRow = $this->object->current();
        $this->assertEquals(null, $currentRow);
    }

    /**
     * @covers Rowset::current
     */
    public function testCurrentOfNotEmptyRowset()
    {
        $currentRow = $this->object->current();
        $this->assertEquals(null, $currentRow);
    }

    /**
     * @covers Rowset::key
     */
    public function testKey()
    {
        $this->assertEquals(0, $this->object->key());
    }

    /**
     * @covers Rowset::next
     */
    public function testNext()
    {
        $this->object->next();
        $this->assertEquals(1, $this->object->key());
    }

    /**
     * @covers Rowset::valid
     */
    public function testValidEmptyRowset() {
        $this->assertEquals(false, $this->object->valid());
    }

    /**
     * @covers Rowset::valid
     */
    public function testValidNotEmpty() {
        $this->object = new Bluz\Db\Rowset(
            array(
                'data' => array(
                    new Bluz\Tests\Db\Fixtures\ConcreteRow(),
                    new Bluz\Tests\Db\Fixtures\ConcreteRowWithInvalidTable()
                )
            )
        );
        $this->assertEquals(true, $this->object->valid());
    }

    /**
     * @covers Rowset::count
     */
    public function testCountEmptyRowset()
    {
        $this->assertEquals(0, $this->object->count());
    }

    /**
     * @covers Rowset::count
     */
    public function testCountNotEmptyRowset()
    {
        $this->object = new Bluz\Db\Rowset(
            array(
                'data' => array(
                    new Bluz\Tests\Db\Fixtures\ConcreteRow(),
                    new Bluz\Tests\Db\Fixtures\ConcreteRowWithInvalidTable()
                )
            )
        );
        $this->assertEquals(2, $this->object->count());
    }

    /**
     * @covers Rowset::seek
     * @expectedException \OutOfBoundsException
     */
    public function testSeekOutOfBoundsException()
    {
        $this->object->seek(42);
    }

    /**
     * @covers Rowset::seek
     */
    public function testSeek()
    {
        $this->object = new Bluz\Db\Rowset(
            array(
                'data' => array(
                    new Bluz\Tests\Db\Fixtures\ConcreteRow(),
                    new Bluz\Tests\Db\Fixtures\ConcreteRowWithInvalidTable()
                )
            )
        );
        $this->object->seek(1);
        $this->assertEquals(1, $this->object->key());
    }

    /**
     * @covers Rowset::offsetExists
     */
    public function testOffsetExists()
    {
        $this->object = new Bluz\Db\Rowset(
            array(
                'data' => array(
                    new Bluz\Tests\Db\Fixtures\ConcreteRow(),
                    new Bluz\Tests\Db\Fixtures\ConcreteRowWithInvalidTable()
                )
            )
        );
        $this->object->seek(1);
        $this->assertTrue($this->object->offsetExists(1));
    }

    /**
     * @covers Rowset::offsetExists
     */
    public function testOffsetExistsException()
    {
        $this->assertFalse($this->object->offsetExists(1));
    }

    /**
     * @covers Rowset::offsetGet
     */
    public function testOffsetGet()
    {
        $this->object = new Bluz\Db\Rowset(
            array(
                'data' => array(
                    new Bluz\Tests\Db\Fixtures\ConcreteRow(),
                    new Bluz\Tests\Db\Fixtures\ConcreteRowWithInvalidTable()
                )
            )
        );
        $this->assertInstanceOf(
            'Bluz\Tests\Db\Fixtures\ConcreteRowWithInvalidTable',
            $this->object->offsetGet(1)
        );
    }

    /**
     * @covers Rowset::offsetGet
     * @expectedException \OutOfBoundsException
     */
    public function testOffsetGetException()
    {
        $this->object->offsetGet(1);
    }
}
